// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  VERIFIED
  USER
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  name     String
  password String
  role     Role    @default(USER)
  avatar   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  points Int    @default(0)
  league League @default(Topaz)

  Token            Token[]
  UserAchievements UserAchievements[]
  Question         Question[]
  Report           Report[]
  Answer           Answer[]
  Rating           Rating[]
  Quiz             Quiz[]
}

// Gamificação:
enum League {
  Topaz
  Rubi
  Esmeralda
  Ametista
  Diamante
}

model Achievement {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title       String
  image       String
  description String

  UserAchievements UserAchievements[]
}

model UserAchievements {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  achievementId String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
}

// Fórum:
model Question {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String

  locked Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  tag   Tags   @relation(fields: [tagId], references: [id])
  tagId String @db.ObjectId

  Answer Answer[]
}

model Answer {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
}

model Tags {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  Question Question[]
}

// Questionário:
model Quiz {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  Question quizQuestion[]
}

model quizQuestion {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  description String
  correct     String
  wrong1      String
  wrong2      String
  wrong3      String
  wrong4      String

  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String @db.ObjectId
}

// Denúncias:
model Report {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reportedBy User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId

  reportableId   String         @db.ObjectId
  reportableType ReportableType

  @@index([reportableId, reportableType])
}

enum ReportableType {
  QUESTION
  ANSWER
  QUIZ
}

// Avaliações:
model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ratedBy   User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId

  rateableId   String       @db.ObjectId
  rateableType RateableType

  @@index([rateableId, rateableType])
}

enum RateableType {
  QUESTION
  ANSWER
  QUIZ
}

// Autenticação:
model Token {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  token       String    @unique
  type        TokenType
  expires     DateTime
  blackListed Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId

  @@index([userId])
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
