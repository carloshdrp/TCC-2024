generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ESTUDIOSO
  INICIANTE
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique @db.VarChar(255)
  name     String
  password String
  role     Role    @default(INICIANTE)
  avatar   String?

  createdAt       DateTime @default(now())
  lastProfileEdit DateTime @default(now())
  updatedAt       DateTime @updatedAt

  points Int    @default(0)
  league League @default(Topaz)

  Token              Token[]
  UserAchievements   UserAchievements[]
  Question           Question[]
  Report             Report[]
  Answer             Answer[]
  Rating             Rating[]
  Quiz               Quiz[]
  QuizRelation       quizRelation[]
  QuizQuestionAnswer QuizQuestionAnswer[]
  QuizAttempt        QuizAttempt[]
  Notification       Notification[]
}

enum League {
  Topaz
  Rubi
  Esmeralda
  Ametista
  Diamante
}

model Achievement {
  id          String   @id @default(cuid())
  title       String
  description String
  condition   String
  imagePath   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  UserAchievements UserAchievements[]
}

model UserAchievements {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
}

model Question {
  id          String @id @default(cuid())
  title       String
  description String @db.Text
  tag         String

  locked Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  Answer Answer[]
}

model Answer {
  id          String @id @default(cuid())
  description String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model Quiz {
  id          String  @id @default(cuid())
  title       String
  description String  @db.Text
  subject     Subject

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  Question     quizQuestion[]
  QuizRelation quizRelation[]
  QuizAttempt  QuizAttempt[]
}

model quizRelation {
  id     String @id @default(cuid())
  quizId String
  userId String

  completed Boolean @default(false)

  quiz Quiz @relation(fields: [quizId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([quizId, userId])
}

model quizQuestion {
  id          String @id @default(cuid())
  description String @db.Text
  correct     String
  wrong1      String
  wrong2      String
  wrong3      String
  wrong4      String

  quiz               Quiz                 @relation(fields: [quizId], references: [id])
  quizId             String
  QuizQuestionAnswer QuizQuestionAnswer[]
}

model QuizQuestionAnswer {
  id String @id @default(cuid())

  choice Choice

  quizQuestionId String
  userId         String
  quizAttemptId  String

  quizQuestion quizQuestion @relation(fields: [quizQuestionId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  quizAttempt  QuizAttempt  @relation(fields: [quizAttemptId], references: [id])
}

model QuizAttempt {
  id String @id @default(cuid())

  quiz Quiz @relation(fields: [quizId], references: [id])
  user User @relation(fields: [userId], references: [id])

  quizId String
  userId String

  score Int?

  createdAt          DateTime             @default(now())
  QuizQuestionAnswer QuizQuestionAnswer[]
}

enum Choice {
  correct
  wrong1
  wrong2
  wrong3
  wrong4
}

enum Subject {
  MATEMATICA
  PORTUGUES
  HISTORIA
  GEOGRAFIA
  BIOLOGIA
  QUIMICA
  FISICA
  SOCIOLOGIA
  FILOSOFIA
  INGLES
  ESPANHOL
  ARTE
  EDUCACAO_FISICA
}

model Report {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reportedBy User   @relation(fields: [userId], references: [id])
  userId     String

  reason      Reason
  description String?

  status  ReportStatus @default(PENDING)
  message String?

  reportableId   String
  reportableType ReportableType

  @@index([reportableId, reportableType])
}

enum ReportStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ReportableType {
  QUESTION
  ANSWER
  QUIZ
}

enum Reason {
  SPAM
  INAPROPRIADO
  OFENSIVO
  LINKS
  OUTRO
}

model Rating {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ratedBy   User     @relation(fields: [userId], references: [id])
  userId    String

  rateableId   String
  rateableType RateableType

  @@index([rateableId, rateableType])
}

enum RateableType {
  QUESTION
  ANSWER
  QUIZ
}

model Notification {
  id          String    @id @default(cuid())
  User        User      @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String
  content     String
  category    String
  resourceId  String?
  readAt      DateTime?
  createdAt   DateTime  @default(now())

  @@index([recipientId])
}

model Token {
  id          String    @id @default(uuid())
  token       String    @unique(length: 255) @db.Text
  type        TokenType
  expires     DateTime
  blackListed Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@index([userId])
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
